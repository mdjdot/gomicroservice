// Code generated by protoc-gen-go. DO NOT EDIT.
// source: student.proto

package student

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Student struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Class                string   `protobuf:"bytes,2,opt,name=Class,proto3" json:"Class,omitempty"`
	Grade                int32    `protobuf:"varint,3,opt,name=Grade,proto3" json:"Grade,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Student) Reset()         { *m = Student{} }
func (m *Student) String() string { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()    {}
func (*Student) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{0}
}

func (m *Student) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Student.Unmarshal(m, b)
}
func (m *Student) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Student.Marshal(b, m, deterministic)
}
func (m *Student) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Student.Merge(m, src)
}
func (m *Student) XXX_Size() int {
	return xxx_messageInfo_Student.Size(m)
}
func (m *Student) XXX_DiscardUnknown() {
	xxx_messageInfo_Student.DiscardUnknown(m)
}

var xxx_messageInfo_Student proto.InternalMessageInfo

func (m *Student) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Student) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *Student) GetGrade() int32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

type StudentRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StudentRequest) Reset()         { *m = StudentRequest{} }
func (m *StudentRequest) String() string { return proto.CompactTextString(m) }
func (*StudentRequest) ProtoMessage()    {}
func (*StudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{1}
}

func (m *StudentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StudentRequest.Unmarshal(m, b)
}
func (m *StudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StudentRequest.Marshal(b, m, deterministic)
}
func (m *StudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentRequest.Merge(m, src)
}
func (m *StudentRequest) XXX_Size() int {
	return xxx_messageInfo_StudentRequest.Size(m)
}
func (m *StudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudentRequest proto.InternalMessageInfo

func (m *StudentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Student)(nil), "student.Student")
	proto.RegisterType((*StudentRequest)(nil), "student.StudentRequest")
}

func init() {
	proto.RegisterFile("student.proto", fileDescriptor_94a1c1b032ad0c00)
}

var fileDescriptor_94a1c1b032ad0c00 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0x29, 0x4d,
	0x49, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x3c, 0xb9,
	0xd8, 0x83, 0x21, 0x4c, 0x21, 0x21, 0x2e, 0x16, 0xbf, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x84, 0x8b, 0xd5, 0x39, 0x27, 0xb1, 0xb8, 0x58, 0x82, 0x09,
	0x2c, 0x08, 0xe1, 0x80, 0x44, 0xdd, 0x8b, 0x12, 0x53, 0x52, 0x25, 0x98, 0x15, 0x18, 0x35, 0x58,
	0x83, 0x20, 0x1c, 0x25, 0x15, 0x2e, 0x3e, 0xa8, 0x51, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x58,
	0x4d, 0x34, 0xf2, 0x84, 0xab, 0x0a, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x32, 0xe7, 0xe2,
	0x72, 0x4f, 0x2d, 0x81, 0xb9, 0x42, 0x5c, 0x0f, 0xe6, 0x52, 0x54, 0xc3, 0xa4, 0x04, 0xd0, 0x25,
	0x92, 0xd8, 0xc0, 0x7e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x5e, 0x7a, 0xb1, 0xdc,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StudentService service

type StudentServiceClient interface {
	GetStudent(ctx context.Context, in *StudentRequest, opts ...client.CallOption) (*Student, error)
}

type studentServiceClient struct {
	c           client.Client
	serviceName string
}

func NewStudentServiceClient(serviceName string, c client.Client) StudentServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "student"
	}
	return &studentServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *studentServiceClient) GetStudent(ctx context.Context, in *StudentRequest, opts ...client.CallOption) (*Student, error) {
	req := c.c.NewRequest(c.serviceName, "StudentService.GetStudent", in)
	out := new(Student)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StudentService service

type StudentServiceHandler interface {
	GetStudent(context.Context, *StudentRequest, *Student) error
}

func RegisterStudentServiceHandler(s server.Server, hdlr StudentServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&StudentService{hdlr}, opts...))
}

type StudentService struct {
	StudentServiceHandler
}

func (h *StudentService) GetStudent(ctx context.Context, in *StudentRequest, out *Student) error {
	return h.StudentServiceHandler.GetStudent(ctx, in, out)
}
