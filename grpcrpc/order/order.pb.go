// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

package order

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OrderRequest struct {
	OrderID              string   `protobuf:"bytes,1,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	OrderTimeStamp       int64    `protobuf:"varint,2,opt,name=OrderTimeStamp,proto3" json:"OrderTimeStamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderRequest) Reset()         { *m = OrderRequest{} }
func (m *OrderRequest) String() string { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()    {}
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{0}
}

func (m *OrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderRequest.Unmarshal(m, b)
}
func (m *OrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderRequest.Marshal(b, m, deterministic)
}
func (m *OrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderRequest.Merge(m, src)
}
func (m *OrderRequest) XXX_Size() int {
	return xxx_messageInfo_OrderRequest.Size(m)
}
func (m *OrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderRequest proto.InternalMessageInfo

func (m *OrderRequest) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *OrderRequest) GetOrderTimeStamp() int64 {
	if m != nil {
		return m.OrderTimeStamp
	}
	return 0
}

type OrderInfo struct {
	OrderID              string   `protobuf:"bytes,1,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	OrderName            string   `protobuf:"bytes,2,opt,name=OrderName,proto3" json:"OrderName,omitempty"`
	OrderStatus          string   `protobuf:"bytes,3,opt,name=OrderStatus,proto3" json:"OrderStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderInfo) Reset()         { *m = OrderInfo{} }
func (m *OrderInfo) String() string { return proto.CompactTextString(m) }
func (*OrderInfo) ProtoMessage()    {}
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{1}
}

func (m *OrderInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderInfo.Unmarshal(m, b)
}
func (m *OrderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderInfo.Marshal(b, m, deterministic)
}
func (m *OrderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderInfo.Merge(m, src)
}
func (m *OrderInfo) XXX_Size() int {
	return xxx_messageInfo_OrderInfo.Size(m)
}
func (m *OrderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OrderInfo proto.InternalMessageInfo

func (m *OrderInfo) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *OrderInfo) GetOrderName() string {
	if m != nil {
		return m.OrderName
	}
	return ""
}

func (m *OrderInfo) GetOrderStatus() string {
	if m != nil {
		return m.OrderStatus
	}
	return ""
}

func init() {
	proto.RegisterType((*OrderRequest)(nil), "order.OrderRequest")
	proto.RegisterType((*OrderInfo)(nil), "order.OrderInfo")
}

func init() {
	proto.RegisterFile("order.proto", fileDescriptor_cd01338c35d87077)
}

var fileDescriptor_cd01338c35d87077 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x2f, 0x4a, 0x49,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x02, 0xb8, 0x78, 0xfc,
	0x41, 0x8c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x09, 0x2e, 0x76, 0x30, 0xdf, 0xd3,
	0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc6, 0x15, 0x52, 0xe3, 0xe2, 0x03, 0x33, 0x43,
	0x32, 0x73, 0x53, 0x83, 0x4b, 0x12, 0x73, 0x0b, 0x24, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0xd0,
	0x44, 0x95, 0x52, 0xb9, 0x38, 0x21, 0x5a, 0xf2, 0xd2, 0xf2, 0xf1, 0x18, 0x27, 0x03, 0x55, 0xe6,
	0x97, 0x98, 0x9b, 0x0a, 0x36, 0x89, 0x33, 0x08, 0x21, 0x20, 0xa4, 0xc0, 0xc5, 0x0d, 0xe6, 0x04,
	0x97, 0x24, 0x96, 0x94, 0x16, 0x4b, 0x30, 0x83, 0xe5, 0x91, 0x85, 0x8c, 0x26, 0x32, 0x41, 0x5d,
	0x1e, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0x64, 0xca, 0xc5, 0xe3, 0x9e, 0x5a, 0x82, 0xb0,
	0x5a, 0x58, 0x0f, 0xe2, 0x5d, 0x64, 0xef, 0x49, 0x09, 0x20, 0x0b, 0x82, 0x95, 0xd9, 0x73, 0x09,
	0x21, 0x6b, 0x0b, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x25, 0x52, 0xb3, 0x12, 0x83, 0x01, 0xa3, 0x90,
	0x2b, 0x97, 0x04, 0xb2, 0x01, 0xce, 0x39, 0x99, 0xa9, 0x79, 0x25, 0x24, 0x1a, 0xa3, 0xc1, 0x28,
	0xe4, 0xc4, 0x25, 0x8c, 0x6c, 0x8c, 0x11, 0xc9, 0x26, 0x18, 0x30, 0x26, 0xb1, 0x81, 0xa3, 0xd6,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x0e, 0xba, 0x2e, 0xe9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderServiceClient interface {
	GetOrderInfo(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderInfo, error)
	GetOrderInfoStream(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (OrderService_GetOrderInfoStreamClient, error)
	GetOrderInfoClientStream(ctx context.Context, opts ...grpc.CallOption) (OrderService_GetOrderInfoClientStreamClient, error)
	GetOrderInfo2Stream(ctx context.Context, opts ...grpc.CallOption) (OrderService_GetOrderInfo2StreamClient, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetOrderInfo(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderInfo, error) {
	out := new(OrderInfo)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderInfoStream(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (OrderService_GetOrderInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderService_serviceDesc.Streams[0], "/order.OrderService/GetOrderInfoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetOrderInfoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetOrderInfoStreamClient interface {
	Recv() (*OrderInfo, error)
	grpc.ClientStream
}

type orderServiceGetOrderInfoStreamClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetOrderInfoStreamClient) Recv() (*OrderInfo, error) {
	m := new(OrderInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetOrderInfoClientStream(ctx context.Context, opts ...grpc.CallOption) (OrderService_GetOrderInfoClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderService_serviceDesc.Streams[1], "/order.OrderService/GetOrderInfoClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetOrderInfoClientStreamClient{stream}
	return x, nil
}

type OrderService_GetOrderInfoClientStreamClient interface {
	Send(*OrderRequest) error
	CloseAndRecv() (*OrderInfo, error)
	grpc.ClientStream
}

type orderServiceGetOrderInfoClientStreamClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetOrderInfoClientStreamClient) Send(m *OrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderServiceGetOrderInfoClientStreamClient) CloseAndRecv() (*OrderInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OrderInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetOrderInfo2Stream(ctx context.Context, opts ...grpc.CallOption) (OrderService_GetOrderInfo2StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderService_serviceDesc.Streams[2], "/order.OrderService/GetOrderInfo2Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetOrderInfo2StreamClient{stream}
	return x, nil
}

type OrderService_GetOrderInfo2StreamClient interface {
	Send(*OrderRequest) error
	Recv() (*OrderInfo, error)
	grpc.ClientStream
}

type orderServiceGetOrderInfo2StreamClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetOrderInfo2StreamClient) Send(m *OrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderServiceGetOrderInfo2StreamClient) Recv() (*OrderInfo, error) {
	m := new(OrderInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer interface {
	GetOrderInfo(context.Context, *OrderRequest) (*OrderInfo, error)
	GetOrderInfoStream(*OrderRequest, OrderService_GetOrderInfoStreamServer) error
	GetOrderInfoClientStream(OrderService_GetOrderInfoClientStreamServer) error
	GetOrderInfo2Stream(OrderService_GetOrderInfo2StreamServer) error
}

// UnimplementedOrderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (*UnimplementedOrderServiceServer) GetOrderInfo(ctx context.Context, req *OrderRequest) (*OrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderInfo not implemented")
}
func (*UnimplementedOrderServiceServer) GetOrderInfoStream(req *OrderRequest, srv OrderService_GetOrderInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderInfoStream not implemented")
}
func (*UnimplementedOrderServiceServer) GetOrderInfoClientStream(srv OrderService_GetOrderInfoClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderInfoClientStream not implemented")
}
func (*UnimplementedOrderServiceServer) GetOrderInfo2Stream(srv OrderService_GetOrderInfo2StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderInfo2Stream not implemented")
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_GetOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderInfo(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetOrderInfoStream(m, &orderServiceGetOrderInfoStreamServer{stream})
}

type OrderService_GetOrderInfoStreamServer interface {
	Send(*OrderInfo) error
	grpc.ServerStream
}

type orderServiceGetOrderInfoStreamServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetOrderInfoStreamServer) Send(m *OrderInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_GetOrderInfoClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServiceServer).GetOrderInfoClientStream(&orderServiceGetOrderInfoClientStreamServer{stream})
}

type OrderService_GetOrderInfoClientStreamServer interface {
	SendAndClose(*OrderInfo) error
	Recv() (*OrderRequest, error)
	grpc.ServerStream
}

type orderServiceGetOrderInfoClientStreamServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetOrderInfoClientStreamServer) SendAndClose(m *OrderInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderServiceGetOrderInfoClientStreamServer) Recv() (*OrderRequest, error) {
	m := new(OrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OrderService_GetOrderInfo2Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServiceServer).GetOrderInfo2Stream(&orderServiceGetOrderInfo2StreamServer{stream})
}

type OrderService_GetOrderInfo2StreamServer interface {
	Send(*OrderInfo) error
	Recv() (*OrderRequest, error)
	grpc.ServerStream
}

type orderServiceGetOrderInfo2StreamServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetOrderInfo2StreamServer) Send(m *OrderInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderServiceGetOrderInfo2StreamServer) Recv() (*OrderRequest, error) {
	m := new(OrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderInfo",
			Handler:    _OrderService_GetOrderInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderInfoStream",
			Handler:       _OrderService_GetOrderInfoStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOrderInfoClientStream",
			Handler:       _OrderService_GetOrderInfoClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetOrderInfo2Stream",
			Handler:       _OrderService_GetOrderInfo2Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "order.proto",
}
